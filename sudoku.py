#!/usr/local/bin/python
import itertools

class Cell:
    def __init__(self, row, col, value = None):
        if value != None:
            self.possible_values = [value,]
        else:
            self.possible_values = [1,2,3,4,5,6,7,8,9]
        self.row = row
        self.col = col

    def __unicode__(self):

        if self.possible_values == [1,2,3,4,5,6,7,8,9]:
            return " "
        return "".join( str(c) for c in self.possible_values )

    def __str__(self):
        return self.__unicode__()


    def get_value(self):
        if len(self.possible_values) == 1:
            return self.possible_values[0]
        else:
            return None

    def set_value(self, value):
        if not value:
            return False

        self.possible_values = [value,]

        return True

    def eliminate_value(self, value):
        if not value or value not in self.possible_values:
            return False

        self.possible_values.remove(value)
        return True


class Grid:
    def __init__(self, grid = None):
        self.cells=[[ Cell(row, col) for row in range(9)] for col in range(9)]
        if grid:
            self.parse_grid(grid)

        self.rows = [ self.cells[i] for i in range(9) ]
        self.cols = [[ self.cells[i][col] for col in range(9) ] for i in range(9) ]

        for col in self.cols:
            print col
            print

        self.subgrids = [[ self.cells[row][col] for row in range(i, i + 3) for col in range(j, j + 3) ] for i in (0,3,6) for j in (0,3,6) ]

        print self.subgrids[1]


    def __str__(self):
        return self.__unicode__()

    def __unicode__(self):
        width = max ( len ( str(self.cells[i][j]) ) for i in range(9) for j in range(9)) + 1

        out=''
        for i in range(9):
            row = ''
            for j in range(9):
                out += str(self.cells[i][j]).center(width)
                if j in (2,5): out += "| "
            out += '\r\n'
            if i in (2, 5): out += ''.join(['-' * (width * 3 + 1)] * 3) + "\n"

        return out

    # manipulating cells
    def get_row(self, row):
        #return [ self.cells[row][i] for i in range(9) ]
        return self.rows[row]

    def get_col(self, col):
        #return [ self.cells[i][col] for i in range(9) ]
        return self.cols[col]

    def get_subgrid(self, row, col):
        start_row = int(row / 3) 
        start_col = int(col / 3) 

        if row < 3:
            subgrid = self.subgrids[start_col]
        elif row < 6:
            subgrid = self.subgrids[start_col + 3]
        else:
            subgrid = self.subgrids[start_col + 6]

        #subgrid = [ self.cells[row][col] for row in range(start_row, start_row + 3) for col in range(start_col, start_col + 3) ]
        #subgrid = self.subgrids[ start_row * 3 + start_col ]
        #print "Subgrid %d,%d:" % (start_row, start_col)
        #for i in range(9):
        #    print str(subgrid[i]).center(10),
        #    if i % 3 == 2: print ""
        #print ""
        return subgrid

    def get_units_for_cell(self, cell):
        return [ self.rows[cell.row], self.cols[cell.col], self.subgrids[int(cell.row / 3) * 3 + int(cell.col/3)] ]


    # solving the grid
    def solve_cell(self, cell):
        modified = []
        modified += self.eliminate_fixed(self.get_row(cell.row))
        modified += self.eliminate_fixed(self.get_col(cell.col))
        modified += self.eliminate_fixed(self.get_subgrid(cell.row, cell.col))

        #print len(modified)

        modified += self.find_only_location(self.get_row(cell.row))
        modified += self.find_only_location(self.get_col(cell.col))
        modified += self.find_only_location(self.get_subgrid(cell.row, cell.col))
        #print len(modified)
        modified = set(modified)
        #print "solve_cell: len(modified) = %d" % len(modified)
        return modified

    def eliminate_fixed(self, unit):
        modified = []
        for cell in unit:
            if cell.get_value():
                for c in unit:
                    if c != cell: 
                        if c.eliminate_value(cell.get_value()):
                            modified.append(c)
        #print "eliminate_fixed: len(modified) = %d" % len(modified)
        return modified

    def find_only_location(self, unit):
        modified = []
        for i in range(len(unit)):
            for val in unit[i].possible_values:
                if all( val not in unit[j].possible_values for j in range(i, len(unit))): 
                    unit[i].set_value(val) 
                    modified.append(unit[i])
                    continue

        #print "find_only_location: len(modified) = %d" % len(modified)
        return modified

    def solve(self):
        iterations = 0
        solved = False

        last_modified = set()
        for i in range(9):
            for j in range(9):
                c = self.cells[i][j]
                last_modified |= set(self.solve_cell(c))
        while not solved:
            iterations += 1
            modified = set()
            for cell in last_modified:
                modified |= self.solve_cell(cell)

            #print "main: len(modified): %d" % len(modified)

            last_modified = modified

            self.display()
            #print "modified: ",
            #for cell in modified:
            #    print "(%d,%d) " % (cell.row,cell.col),

            #if len(modified) == 0:
            if self.check_all():
                print ""
                print "Puzzle is SOLVED (%d iterations)" % iterations
                solved = True
            else:
                print "\rPuzzle is NOT solved (%d iterations)" % iterations,
                solved = False

            raw_input("Press any key to continue...")


    # checking the grid

    def is_unit_solved(self, unit):
        for i in range(len(unit)):
            c = unit[i]
            # if the value of this cell isn't finalized, it's not solved 
            if not c.get_value():
                return False

            else:
                for j in range(i + 1, len(unit)):
                    # check for conflicts
                    #print "Checking %d against %d: %s %s" % (i, j, unit[i].get_value(), unit[j].get_value())
                    if unit[j].get_value() == c.get_value():
                        return False

        return True

    def check_row(self, row):
        return self.is_unit_solved(self.get_row(row))

    def check_col(self, col):
        return self.is_unit_solved(self.get_col(col))

    def check_subgrid(self, row, col):
        return self.is_unit_solved(self.get_subgrid(row, col))

    def check_cell(self, row, col):
        return all(self.check_row(row), self.check_col(col), self.check_subgrid(row, col))

    def check_all(self):
        return all(self.check_row(r) for r in range(9)) and all(self.check_col(c) for c in range(9)) and all(self.check_subgrid(r, c) for r in (0,3,6) for c in (0, 3, 6))

    
    # input/output
    def display(self):
        print str(self)

    def parse_grid(self, grid):
        if len(grid) != 81:
            print "Invalid grid (length %d)" % len(grid)
            return False

        for i in range(len(grid)):
            c = grid[i];

            if c in '123456789':
                self.cells[int(i/9)][i % 9].set_value(int(c))
            elif c in '.0':
                pass
            else:
                print "Invalid grid character: %c" % c
                return False

        print "Grid parsed:"
        return True
        

import time

grids = [
            "003020600900305001001806400008102900700000008006708200002609500800203009005010300",
            #"4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......",
            "4.....8.5.3..........7......2.....6.....8.4......1.......6.3.7.5..2.....1.4......",
            "52...6.........7.13...........4..8..6......5...........418.........3..2...87.....",
            "6.....8.3.4.7.................5.4.7.3..2.....1.6.......2.....5.....8.6......1....",
            "48.3............71.2.......7.5....6....2..8.............1.76...3.....4......5....",
            "....14....3....2...7..........9...3.6.1.............8.2.....1.4....5.6.....7.8...",
            "......52..8.4......3...9...5.1...6..2..7........3.....6...1..........7.4.......3.",
            "6.2.5.........3.4..........43...8....1....2........7..5..27...........81...6.....",
            ".524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........",
            "6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....",
            ".923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....",
            "6..3.2....5.....1..........7.26............543.........8.15........4.2........7..",
            ".6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...",
            "..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..",
            "3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....",
            "1.....3.8.7.4..............2.3.1...........958.........5.6...7.....8.2...4.......",
            "6..3.2....4.....1..........7.26............543.........8.15........4.2........7..",
            "....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.",
            "45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..",
            ".237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......",
            "..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56",
            ".98.1....2......6.............3.2.5..84.........6.........4.8.93..5...........1..",
            "..247..58..............1.4.....2...9528.9.4....9...1.........3.3....75..685..2...",
            "4.....8.5.3..........7......2.....6.....5.4......1.......6.3.7.5..2.....1.9......",
            ".2.3......63.....58.......15....9.3....7........1....8.879..26......6.7...6..7..4",
            "1.....7.9.4...72..8.........7..1..6.3.......5.6..4..2.........8..53...7.7.2....46",
            "4.....3.....8.2......7........1...8734.......6........5...6........1.4...82......",
            ".......71.2.8........4.3...7...6..5....2..3..9........6...7.....8....4......5....",
            "6..3.2....4.....8..........7.26............543.........8.15........8.2........7..",
            ".47.8...1............6..7..6....357......5....1..6....28..4.....9.1...4.....2.69.",
            "......8.17..2........5.6......7...5..1....3...8.......5......2..4..8....6...3....",
            "38.6.......9.......2..3.51......5....3..1..6....4......17.5..8.......9.......7.32",
            "...5...........5.697.....2...48.2...25.1...3..8..3.........4.7..13.5..9..2...31..",
            ".2.......3.5.62..9.68...3...5..........64.8.2..47..9....3.....1.....6...17.43....",
            ".8..4....3......1........2...5...4.69..1..8..2...........3.9....6....5.....2.....",
            "..8.9.1...6.5...2......6....3.1.7.5.........9..4...3...5....2...7...3.8.2..7....4",
            "4.....5.8.3..........7......2.....6.....5.8......1.......6.3.7.5..2.....1.8......",
            "1.....3.8.6.4..............2.3.1...........958.........5.6...7.....8.2...4.......",
            "1....6.8..64..........4...7....9.6...7.4..5..5...7.1...5....32.3....8...4........",
            "249.6...3.3....2..8.......5.....6......2......1..4.82..9.5..7....4.....1.7...3...",
            "...8....9.873...4.6..7.......85..97...........43..75.......3....3...145.4....2..1",
            "...5.1....9....8...6.......4.1..........7..9........3.8.....1.5...2..4.....36....",
            "......8.16..2........7.5......6...2..1....3...8.......2......7..3..8....5...4....",
            ".476...5.8.3.....2.....9......8.5..6...1.....6.24......78...51...6....4..9...4..7",
            ".....7.95.....1...86..2.....2..73..85......6...3..49..3.5...41724................",
            ".4.5.....8...9..3..76.2.....146..........9..7.....36....1..4.5..6......3..71..2..",
            ".834.........7..5...........4.1.8..........27...3.....2.6.5....5.....8........1..",
            "..9.....3.....9...7.....5.6..65..4.....3......28......3..75.6..6...........12.3.8",
            ".26.39......6....19.....7.......4..9.5....2....85.....3..2..9..4....762.........4",
            "2.3.8....8..7...........1...6.5.7...4......3....1............82.5....6...1.......",
            "6..3.2....1.....5..........7.26............843.........8.15........8.2........7..",
            "1.....9...64..1.7..7..4.......3.....3.89..5....7....2.....6.7.9.....4.1....129.3.",
            ".........9......84.623...5....6...453...1...6...9...7....1.....4.5..2....3.8....9",
            ".2....5938..5..46.94..6...8..2.3.....6..8.73.7..2.........4.38..7....6..........5",
            "9.4..5...25.6..1..31......8.7...9...4..26......147....7.......2...3..8.6.4.....9.",
            "...52.....9...3..4......7...1.....4..8..453..6...1...87.2........8....32.4..8..1.",
            "53..2.9...24.3..5...9..........1.827...7.........981.............64....91.2.5.43.",
            "1....786...7..8.1.8..2....9........24...1......9..5...6.8..........5.9.......93.4",
            "....5...11......7..6.....8......4.....9.1.3.....596.2..8..62..7..7......3.5.7.2..",
            ".47.2....8....1....3....9.2.....5...6..81..5.....4.....7....3.4...9...1.4..27.8..",
            "......94.....9...53....5.7..8.4..1..463...........7.8.8..7.....7......28.5.26....",
            ".2......6....41.....78....1......7....37.....6..412....1..74..5..8.5..7......39..",
            "1.....3.8.6.4..............2.3.1...........758.........7.5...6.....8.2...4.......",
            "2....1.9..1..3.7..9..8...2.......85..6.4.........7...3.2.3...6....5.....1.9...2.5",
            "..7..8.....6.2.3...3......9.1..5..6.....1.....7.9....2........4.83..4...26....51.",
            "...36....85.......9.4..8........68.........17..9..45...1.5...6.4....9..2.....3...",
            "34.6.......7.......2..8.57......5....7..1..2....4......36.2..1.......9.......7.82",
            "......4.18..2........6.7......8...6..4....3...1.......6......2..5..1....7...3....",
            ".4..5..67...1...4....2.....1..8..3........2...6...........4..5.3.....8..2........",
            ".......4...2..4..1.7..5..9...3..7....4..6....6..1..8...2....1..85.9...6.....8...3",
            "8..7....4.5....6............3.97...8....43..5....2.9....6......2...6...7.71..83.2",
            ".8...4.5....7..3............1..85...6.....2......4....3.26............417........",
            "....7..8...6...5...2...3.61.1...7..2..8..534.2..9.......2......58...6.3.4...1....",
            "......8.16..2........7.5......6...2..1....3...8.......2......7..4..8....5...3....",
            ".2..........6....3.74.8.........3..2.8..4..1.6..5.........1.78.5....9..........4.",
            ".52..68.......7.2.......6....48..9..2..41......1.....8..61..38.....9...63..6..1.9",
            "....1.78.5....9..........4..2..........6....3.74.8.........3..2.8..4..1.6..5.....",
            "1.......3.6.3..7...7...5..121.7...9...7........8.1..2....8.64....9.2..6....4.....",
            "4...7.1....19.46.5.....1......7....2..2.3....847..6....14...8.6.2....3..6...9....",
            "......8.17..2........5.6......7...5..1....3...8.......5......2..3..8....6...4....",
            "963......1....8......2.5....4.8......1....7......3..257......3...9.2.4.7......9..",
            "15.3......7..4.2....4.72.....8.........9..1.8.1..8.79......38...........6....7423",
            "..........5724...98....947...9..3...5..9..12...3.1.9...6....25....56.....7......6",
            "....75....1..2.....4...3...5.....3.2...8...1.......6.....1..48.2........7........",
            "6.....7.3.4.8.................5.4.8.7..2.....1.3.......2.....5.....7.9......1....",
            "....6...4..6.3....1..4..5.77.....8.5...8.....6.8....9...2.9....4....32....97..1..",
            ".32.....58..3.....9.428...1...4...39...6...5.....1.....2...67.8.....4....95....6.",
            "...5.3.......6.7..5.8....1636..2.......4.1.......3...567....2.8..4.7.......2..5..",
            ".5.3.7.4.1.........3.......5.8.3.61....8..5.9.6..1........4...6...6927....2...9..",
            "..5..8..18......9.......78....4.....64....9......53..2.6.........138..5....9.714.",
            "..........72.6.1....51...82.8...13..4.........37.9..1.....238..5.4..9.........79.",
            "...658.....4......12............96.7...3..5....2.8...3..19..8..3.6.....4....473..",
            ".2.3.......6..8.9.83.5........2...8.7.9..5........6..4.......1...1...4.22..7..8.9",
            ".5..9....1.....6.....3.8.....8.4...9514.......3....2..........4.8...6..77..15..6.",
            ".....2.......7...17..3...9.8..7......2.89.6...13..6....9..5.824.....891..........",
            "3...8.......7....51..............36...2..4....7...........6.13..452...........8..",
        ]

if __name__ == '__main__':

    for grid in grids:
        g = Grid(grid)
        print g

        t_start = time.clock()
        g.solve()
        t_end = time.clock()
        print "solved in %.4f seconds" % (t_end - t_start)
        g.display()

